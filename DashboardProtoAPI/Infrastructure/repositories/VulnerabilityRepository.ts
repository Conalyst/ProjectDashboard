import { BaseRepository } from "../contracts/BaseRepository"
import { Model } from "sequelize-typescript";
import db from '../db/models'
import sequelize from "sequelize";
const Vulnerability = require("../db/models")

export class VulnerabilityRepository {
    constructor(){
         
    }
  
    public async Get(){
      let vulnerabilities  = await db.Vulnerability.findAll();
      return vulnerabilities;
    }  

    public async GetById(id:number){
      return db.Vulnerability.findByPk(id);    
    }   
    
    async GetByTitle(title: string){

      const vulnerability = await db.Vulnerability.findOne({
           where: {title: `${title}`}
       })
       return vulnerability;
    } 
    
    public async Create(model: Model<typeof Vulnerability>){
      return db.Vulnerability.create(model['dataValues']);
    }

    public async Update(model: Model<typeof Vulnerability>, id:number){
      return db.Vulnerability.update(model['dataValues'], {where: {id: `${id}`}});
  }
  public async delete(model: Model<typeof Vulnerability>, idVulnerability:number){
    return model.destroy();
  }

  public async GetTotal(model: Model<typeof Vulnerability>) {
    return db.Vulnerability.findAll({
      attributes: [
      
        [sequelize.fn('COUNT', sequelize.col('id')), 'total_Vulnerability'],
     
      ]
    });
    
  }

  public async GetHigh(model: Model<typeof Vulnerability>) {
    return db.Vulnerability.findAll({
      attributes: [
      
        [sequelize.fn('COUNT', sequelize.col('id')), 'high_Vulnerability'],
     
      ],
      where: {rating: 'High'}
    });
    
  }

  public async GetMedium(model: Model<typeof Vulnerability>) {
    return db.Vulnerability.findAll({
      attributes: [
      
        [sequelize.fn('COUNT', sequelize.col('id')), 'mediun_Vulnerability'],
     
      ],
      where: {rating: 'Medium'}
    });
    
  }

  public async GetLow(model: Model<typeof Vulnerability>) {
    return db.Vulnerability.findAll({
      attributes: [
      
        [sequelize.fn('COUNT', sequelize.col('id')), 'low_Vulnerability'],
     
      ],
      where: {rating: 'Low'}
    });
    
  }

  public async GetHighImpact(model: Model<typeof Vulnerability>) {
    return db.Vulnerability.findAll({
      attributes: [
      
        [sequelize.fn('COUNT', sequelize.col('id')), 'high_Vulnerability'],
     
      ],
      where: {impact: 'H'}
    });
    
  }

  public async GetMediumImpact(model: Model<typeof Vulnerability>) {
    return db.Vulnerability.findAll({
      attributes: [
      
        [sequelize.fn('COUNT', sequelize.col('id')), 'mediun_Vulnerability'],
     
      ],
      where: {impact: 'M'}
    });
    
  }

  public async GetLowImpact(model: Model<typeof Vulnerability>) {
    return db.Vulnerability.findAll({
      attributes: [
      
        [sequelize.fn('COUNT', sequelize.col('id')), 'low_Vulnerability'],
     
      ],
      where: {impact: 'L'}
    });
    
  }
//Likelihood


public async GetHighLikelihood(model: Model<typeof Vulnerability>) {
  return db.Vulnerability.findAll({
    attributes: [
    
      [sequelize.fn('COUNT', sequelize.col('id')), 'high_Vulnerability'],
   
    ],
    where: {likelihood: 'H'}
  });
  
}

public async GetMediumLikelihood(model: Model<typeof Vulnerability>) {
  return db.Vulnerability.findAll({
    attributes: [
    
      [sequelize.fn('COUNT', sequelize.col('id')), 'mediun_Vulnerability'],
   
    ],
    where: {likelihood: 'M'}
  });
  
}

public async GetLowLikelihood(model: Model<typeof Vulnerability>) {
  return db.Vulnerability.findAll({
    attributes: [
    
      [sequelize.fn('COUNT', sequelize.col('id')), 'low_Vulnerability'],
   
    ],
    where: {likelihood: 'L'}
  });
  
}


}