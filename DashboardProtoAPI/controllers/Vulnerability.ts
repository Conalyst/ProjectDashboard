import express from 'express'
import  {VulnerabilityRepository } from '../Infrastructure/repositories/VulnerabilityRepository'
import { VulnerabilityDto } from '../domain/dtos/VulnerabilityDto'
import {toEntity} from '../application/mappers/VulnerabilityMapper'

export class VulnerabilityApi{
    private _VulnerabilityRepository:any;

    constructor(){    
        this._VulnerabilityRepository = new VulnerabilityRepository();
    }
    
    async getAllVulnerabilities(req: express.Request, res: express.Response){
      let vulnerabilityList = await this._VulnerabilityRepository.Get();
      // console.log("Helllllo")
      return  res.status(200).json(vulnerabilityList);
    };

    async getVulnerabilityById(req: express.Request, res: express.Response){
      let vulnerabilityId = req.params.id;
      console.log(vulnerabilityId)
      let vulnerability = await this._VulnerabilityRepository.GetById(vulnerabilityId);
      return  res.status(200).json(vulnerability);
    };

    async create(req: express.Request, res: express.Response){
        
      const { title} = req.body;
     
      const alreadyExistsVuln = await this._VulnerabilityRepository.GetVulnerabilityByTitle(title)
      .catch(
      (err) => {
          console.log("Error: ", err);
      }
      );
      if (alreadyExistsVuln) {
      return res.status(409).json({ message: "this Vulnerability already exist!" });
      }else{
        const vulnDto = this.getDtoFromRequest(req);
        
        let createdVuln = await this._VulnerabilityRepository.Create(toEntity(vulnDto))
       
      if(createdVuln){
          return res.status(201).json(createdVuln);
      }else{
          return res.status(400).send("The vulnerability could not be created. Please check the provided data.")
      }
      }
      
  }

    //#region private methods
    getDtoFromRequest(req: express.Request){
        
      return new VulnerabilityDto(req.body.id, req.body.category,req.body.title, req.body.description, req.body.impact, req.body.likelihood, req.body.rating, new Date());
  }
}