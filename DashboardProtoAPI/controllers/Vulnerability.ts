import express from 'express'
import  {VulnerabilityRepository } from '../Infrastructure/repositories/VulnerabilityRepository'
import { VulnerabilityDto } from '../domain/dtos/VulnerabilityDto'
import {toEntity} from '../application/mappers/VulnerabilityMapper'

export class VulnerabilityApi{
    private _vulnerabilityRepository:any;

    constructor(){    
        this._vulnerabilityRepository = new VulnerabilityRepository();
    }
    
    async getAllVulnerabilities(req: express.Request, res: express.Response){
      let vulnerabilityList = await this._vulnerabilityRepository.Get();
      // console.log("Helllllo")
      return  res.status(200).json(vulnerabilityList);
    };

    async getVulnerabilityById(req: express.Request, res: express.Response){
      let vulnerabilityId = req.params.id;
      console.log(vulnerabilityId)
      let vulnerability = await this._vulnerabilityRepository.GetById(vulnerabilityId);
      return  res.status(200).json(vulnerability);
    };
   
      //static Asset
      async getStaticVulnerabilities(req: express.Request, res: express.Response){
       
        let numberVulnerability = await this._vulnerabilityRepository.GetTotal();
        let highVulnerability = await this._vulnerabilityRepository.GetHigh();
        let mediumVulnerability = await this._vulnerabilityRepository.GetMedium();
        let lowVulnerability = await this._vulnerabilityRepository.GetLow();
        return  res.status(200).json({
          "static":{ numberVulnerability,highVulnerability,mediumVulnerability,lowVulnerability}});
      };   
       
    async create(req: express.Request, res: express.Response){
        
      const { title} = req.body;
     
      const alreadyExistsVuln = await this._vulnerabilityRepository.GetByTitle(title)
      .catch(
      (err) => {
          console.log("Error: ", err);
      }
      );
      if (alreadyExistsVuln) {
      return res.status(409).json({ message: "this Vulnerability already exist!" });
      }else{
        const vulnDto = this.getDtoFromRequest(req);
        
        let createdVuln = await this._vulnerabilityRepository.Create(toEntity(vulnDto))
       
      if(createdVuln){
          return res.status(201).json(createdVuln);
      }else{
          return res.status(400).send("The vulnerability could not be created. Please check the provided data.")
      }
      }
      
  }

  async update(req: express.Request, res: express.Response){
        
    const id = req.params.id;
    const exists = await this._vulnerabilityRepository.GetById(id)
    .catch(
    (err) => {
        console.log("Error: ", err);
    }
    );
    if (exists) {
      const vulnerabilityDto = this.getDtoFromRequest(req);      
      let updatedVuln = await this._vulnerabilityRepository.Update(toEntity(vulnerabilityDto), id)
    
      if(updatedVuln){
        updatedVuln = await this._vulnerabilityRepository.GetById(id)
        return res.status(201).json(updatedVuln);
      }else{
        return res.status(400).send("The vulnerability could not be updated. Please check the provided data.")
      }
    } else {
      return res.status(400).send("This vulnerability doesn't exist. Please check the threat.")
    }
    
  }
 // Delete vulnerability 
 async delete(req: express.Request, res: express.Response){
  let vulnerabilityId = req.params.id;
   let existingVulnerability = await this._vulnerabilityRepository.GetById(vulnerabilityId);
  if (existingVulnerability){
  
    let updatedVulnerability = await this._vulnerabilityRepository.delete(existingVulnerability)
   
 
      return res.status(200).send( `The vulnerability with Id ${vulnerabilityId} deleted  successfully..!`)
      
    
  } else{
      return res.status(404).send("This vulnerability does not exist.")
  }
}
    //#region private methods
    getDtoFromRequest(req: express.Request){
      let ratingVul ;
      if (req.body.rating == "High")    {
            
        ratingVul= 3;
     }  else if (req.body.rating == "Medium"){
      ratingVul  = 2;
     } else if (req.body.rating == "Low"){
      ratingVul= 1;
     }      
      return new VulnerabilityDto(req.body.id, req.body.category,req.body.title, req.body.description, req.body.impact, req.body.likelihood, req.body.rating,ratingVul, new Date());
  }
}