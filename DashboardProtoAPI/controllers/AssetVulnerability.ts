import express from 'express'
import  {AssetVulnerabilityRepository as assetVulnerability} from '../Infrastructure/repositories/AssetVulnerabilityRepository'
import { AssetVulnerabilityDto } from '../domain/dtos/AssetVulnerabiltyDto'
import {toEntity} from '../application/mappers/assetVulnerabiltyMapper'

export class AssetVulnerabilityApi{
    private _assetVulnRepository:any;
    constructor(){
        this._assetVulnRepository = new assetVulnerability();
    }

    async getByVulnerabilityId(req: express.Request, res: express.Response){
      let VulnerabilityId = req.params.id;
      // console.log(Vulnerability)
      let vulnerabilities = await this._assetVulnRepository.GetByVulnetabilityId(VulnerabilityId);
      return  res.status(200).json(vulnerabilities);
    };

    async getByAssetId(req: express.Request, res: express.Response){
      let assetId = req.params.id;
      // console.log(Vulnerability)
      let assets = await this._assetVulnRepository.GetByAssetId(assetId);
      return  res.status(200).json(assets);
    };

    async create(req: express.Request, res: express.Response){
        
      const assetId = req.query.assetId;
      const vulnId = req.query.vulnerabilityId;     
 
      const alreadyExists = await this._assetVulnRepository.GetByAssetVulnetabilityIds(vulnId, assetId)     
      .catch(
        (err) => {
            console.log("Error: ", err);
        }
      );

      if (alreadyExists) {
        return res.status(409).json({ message: "this Asset and Vulnerability already exist!" });
      } else {
        const assetVulnDto = this.getDtoFromRequest(req);       
        let createdAssetVuln = await this._assetVulnRepository.Create(toEntity(assetVulnDto))       
        if(createdAssetVuln) {
            return res.status(201).json(createdAssetVuln);
        } else {
            return res.status(400).send("The asset Vulnerability could not be created. Please check the provided data.")
        }
      }      
  }

  getDtoFromRequest(req: express.Request){        
    return new AssetVulnerabilityDto(req.body.id,req.body.assetId,req.body.vulnerabilityId, new Date());
  }
}