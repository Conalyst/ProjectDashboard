import express from 'express'
import  {VulnerabilityThreatRepository as vulnerabilityThreat} from '../Infrastructure/repositories/VulnerabilityThreatRepository'
import { VulnerabilityThreatDto } from '../domain/dtos/VulnerabilityThreatDto'
import {toEntity} from '../application/mappers/vulnerabilityThreatMapper'

export class VulnerabilityThreatApi{
    private _vulnerabilityThreat:any;
    constructor(){
        this._vulnerabilityThreat = new vulnerabilityThreat();
    }

    async getByVulnerabilityId(req: express.Request, res: express.Response){
      let VulnerabilityId = req.params.id;
      // console.log(Vulnerability)
      let vulnerabilities = await this._vulnerabilityThreat.GetByVulnetabilityId(VulnerabilityId);
      return  res.status(200).json(vulnerabilities);
    };

    async getByThreatId(req: express.Request, res: express.Response){
      let threatId = req.params.id;
      // console.log(Vulnerability)
      let threats = await this._vulnerabilityThreat.GetByThreatId(threatId);
      return  res.status(200).json(threats);
    };

    async create(req: express.Request, res: express.Response){
        
      const vulnId = req.query.vulnerabilityId;     
      const threatId = req.query.threatId;
 
      const alreadyExists = await this._vulnerabilityThreat.GetByVulnetabilityThreatIds(vulnId, threatId)     
      .catch(
        (err) => {
            console.log("Error: ", err);
        }
      );

      if (alreadyExists) {
        return res.status(409).json({ message: "this Vulnerability and threat already exist!" });
      } else {
        const vulnThreatDto = this.getDtoFromRequest(req);       
        let createdVulnThreat = await this._vulnerabilityThreat.Create(toEntity(vulnThreatDto))       
        if(createdVulnThreat) {
            return res.status(201).json(createdVulnThreat);
        } else {
            return res.status(400).send("The Vulnerability and Threat could not be created. Please check the provided data.")
        }
      }      
  }

  getDtoFromRequest(req: express.Request){        
    return new VulnerabilityThreatDto(req.body.id,req.body.vulnerabilityId, req.body.threatId, new Date());
  }
}