"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetVulnerabilityApi = void 0;
const AssetVulnerabilityRepository_1 = require("../Infrastructure/repositories/AssetVulnerabilityRepository");
const AssetVulnerabiltyDto_1 = require("../domain/dtos/AssetVulnerabiltyDto");
const assetVulnerabiltyMapper_1 = require("../application/mappers/assetVulnerabiltyMapper");
class AssetVulnerabilityApi {
    constructor() {
        this._assetVulnRepository = new AssetVulnerabilityRepository_1.AssetVulnerabilityRepository();
    }
    getByVulnerabilityId(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            let VulnerabilityId = req.params.id;
            // console.log(Vulnerability)
            let vulnerabilities = yield this._assetVulnRepository.GetByVulnetabilityId(VulnerabilityId);
            return res.status(200).json(vulnerabilities);
        });
    }
    ;
    getByAssetId(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            let assetId = req.params.id;
            // console.log(Vulnerability)
            let assets = yield this._assetVulnRepository.GetByAssetId(assetId);
            return res.status(200).json(assets);
        });
    }
    ;
    create(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            const assetId = req.query.assetId;
            const vulnId = req.query.vulnerabilityId;
            const alreadyExists = yield this._assetVulnRepository.GetByAssetVulnetabilityIds(vulnId, assetId)
                .catch((err) => {
                console.log("Error: ", err);
            });
            if (alreadyExists) {
                return res.status(409).json({ message: "this Asset and Vulnerability already exist!" });
            }
            else {
                const assetVulnDto = this.getDtoFromRequest(req);
                let createdAssetVuln = yield this._assetVulnRepository.Create((0, assetVulnerabiltyMapper_1.toEntity)(assetVulnDto));
                if (createdAssetVuln) {
                    return res.status(201).json(createdAssetVuln);
                }
                else {
                    return res.status(400).send("The asset Vulnerability could not be created. Please check the provided data.");
                }
            }
        });
    }
    getDtoFromRequest(req) {
        return new AssetVulnerabiltyDto_1.AssetVulnerabilityDto(req.body.id, req.body.assetId, req.body.vulnerabilityId, new Date());
    }
}
exports.AssetVulnerabilityApi = AssetVulnerabilityApi;
