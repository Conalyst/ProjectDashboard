"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetVulnerabilityRepository = void 0;
const models_1 = __importDefault(require("../db/models"));
const AssetVulnerability = require("../db/models");
class AssetVulnerabilityRepository {
    constructor() {
    }
    GetByAssetId(AssetId) {
        return __awaiter(this, void 0, void 0, function* () {
            let vulnerabilities = yield models_1.default.AssetVulnerability.findAll({
                where: { assetId: `${AssetId}` },
                include: [
                    {
                        model: models_1.default.Asset,
                        attributes: ['id', 'title', 'description']
                    },
                    {
                        model: models_1.default.Vulnerability,
                        attributes: ['id', 'category', 'title', 'description']
                    }
                ],
                attributes: ['id', 'assetId', 'vulnerabilityId']
                // include: { all: true, nested: true }
            });
            return vulnerabilities;
        });
    }
    GetByVulnetabilityId(vulnerabilityId) {
        return __awaiter(this, void 0, void 0, function* () {
            let vulnerabilities = yield models_1.default.AssetVulnerability.findAll({
                where: { vulnerabilityId: `${vulnerabilityId}` },
                include: [
                    {
                        model: models_1.default.Asset,
                        attributes: ['id', 'title', 'description']
                    },
                    {
                        model: models_1.default.Vulnerability,
                        attributes: ['id', 'category', 'title', 'description']
                    }
                ],
                attributes: ['id', 'assetId', 'vulnerabilityId']
                // include: { all: true, nested: true }
            });
            return vulnerabilities;
        });
    }
    GetByAssetVulnetabilityIds(vulnerabilityId, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            let results = yield models_1.default.AssetVulnerability.findOne({
                where: { vulnerabilityId: `${vulnerabilityId}`, assetId: `${assetId}` }
            });
            return results;
        });
    }
    Create(model) {
        return __awaiter(this, void 0, void 0, function* () {
            return models_1.default.AssetVulnerability.create(model['dataValues']);
        });
    }
}
exports.AssetVulnerabilityRepository = AssetVulnerabilityRepository;
