import { SYSTEM_ERROR } from "../config/CONSTANTS";
import axios from 'axios'
import { GET_ALL_VULNERABILITIES, GET_VULNERABILITY_BY_ID, PUT_VULN,POST_VULNERABILITY ,GET_STATIC_VULNERABILITIES, POST_VULN_THREAT, DELETE_VULN} from "./constants";


  export const getAllVulnerabilities = () => {
    return new Promise((resolve, reject) => {
      try {
        // do an SDK, DB call or API endpoint axios call here and return the promise.
        axios
        .get(GET_ALL_VULNERABILITIES())
        .then((res) => {
            console.log("res...", res.data)
           resolve(res.data);
        })
        .catch((err) => {
          reject("Error in getAllVulnerabilities axios!");
        });
      } catch (error) {
        reject(SYSTEM_ERROR);
      }
    });
  };
 
  export const getVulnerabilityById = (vulnerabilityId) => {
    return new Promise((resolve, reject) => {
      try {
        axios       
        .get(GET_VULNERABILITY_BY_ID(vulnerabilityId))
        .then(res => {
            resolve(res.data);
        })
        .catch((err) => {
          reject("Error in vulnerability by Id  axios!");
        });
      } catch (error) {
        reject(SYSTEM_ERROR);
      }
    });
  };

  export const postVulnerability = (vulnerability) => {
    return new Promise((resolve, reject) => {
      try {
        axios       
        .post(POST_VULNERABILITY(),vulnerability)
        .then(res => {
            resolve(res);
        })
        .catch((err) => {
          console.log("postasset > axios err=", err);
          reject("Error in post vulnerability axios!");
        });
      } catch (error) {
        console.error("in addVuln > postVuln, Err===", error);
        reject(SYSTEM_ERROR);
      }
    });
  };
  export const getStaticVulnerability = () => {
    return new Promise((resolve, reject) => {
      try {
        // do an SDK, DB call or API endpoint axios call here and return the promise.
        axios
        .get(GET_STATIC_VULNERABILITIES())
        .then((res) => {
           resolve(res.data);
        })
        .catch((err) => {
          reject("Error in getTotalVulnerability axios!");
        });
      } catch (error) {
        reject(SYSTEM_ERROR);
      }
    });
  };

  export const postVulnThreat = (vulnId, threatId) => {
    console.log("New vuln id and threat id and .. post",vulnId, threatId)
    return new Promise((resolve, reject) => {
      try {
        axios
        .post(POST_VULN_THREAT(), {   
          vulnerabilityId: vulnId,
          threatId: threatId      
        }) 
        .then(res=>{
          console.log("new connect", res.data)
        })
      } catch (error) {
        console.error("in addVulnThreat > postVuln, Err===", error);
        reject(SYSTEM_ERROR);
      }
    });
  };

  export const deleteVuln = (vulnId) => {
    console.log("Asset id in delete", vulnId)
    return new Promise((resolve, reject) => {
      try {
        axios
        .delete(DELETE_VULN(vulnId)) 
        .then(res => {
          console.log("new connect", res.data)
        })
      } catch (error) {
        console.error("in deleteVuln > postVuln, Err===", error);
        reject(SYSTEM_ERROR);
      }
    });
  };

  export const putVuln = (vulnDto) => {
    return new Promise((resolve, reject) => {
      const storedUser = localStorage.getItem("storedUser");
    
      const parsedUser = JSON.parse(storedUser);
      try {
        axios
        .put(PUT_VULN(vulnDto.id), vulnDto
        ) 
        .then(res=>{
          console.log("new connect put vuln", res)
        })
      } catch (error) {
        console.error("in Update Vulnerabilities > Update Asset, Err===", error);
        reject(SYSTEM_ERROR);
      }
    });
  };